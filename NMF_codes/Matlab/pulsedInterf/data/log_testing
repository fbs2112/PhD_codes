nmf_testing_04: testing using coherence time of 500 mus
nmf_testing_05: testing using coherence time of 100 mus
nmf_testing_06: testing using coherence time of 100 mus and interference signal with larger pulses
nmf_testing_06: same as 04. This simulation is to confirm the results found in 04
nmf_testing_07: testing using coherence time of 500 mus and quantisation of 2 bits
nmf_testing_08: testing using coherence time of 500 mus with GPS signal delay fixed
nmf_testing_09: testing using coherence time of 500 mus with GPS signal delay fixed and using 2, 4, 8, 16 bits for quantisation
nmf_testing_10: testing using coherence time of 500 mus with GPS signal delay fixed and without interference signal
nmf_testing_11: testing using coherence time of 500 mus with GPS signal delay fixed and using 2, 4, 8, 16 bits for quantisation (quantisation function fixed)
nmf_testing_12: testing using coherence time of 500 mus and only noise in the received signal (probability of false alarm evaluation)
nmf_testing_13: testing using coherence time of 500 mus with GPS signal delay fixed and 100 MonteCarlo loops (probability of detection evaluation) (JNR = 10 dB)
nmf_testing_14: testing using coherence time of 500 mus with GPS signal delay fixed and 100 MonteCarlo loops (probability of detection evaluation) (JNR = [-5 30 50] dB)
nmf_testing_15: testing using coherence time of 500 mus with GPS signal delay fixed and 100 MonteCarlo loops (probability of detection evaluation) (JNR = [-5 10 30 50] dB) 78 MonteCarlo loops
nmf_testing_16: testing using coherence time of 500 mus with GPS signal delay fixed and 100 MonteCarlo loops (probability of detection evaluation) (JNR = [-5 10 30 50] dB) 100 MonteCarlo loops
nmf_testing_17: testing using coherence time of 500 mus, JNR = [-5 30 50] dB, nbits = [2 4], 100 MonteCarlo loops
nmf_testing_18: testing using coherence time of 500 mus, error thresholds of 1e-3 and max it = 500;
nmf_testing_19: testing using coherence time of 500 mus, error thresholds of 1e-3 and max it = 500 (quantisation function now saturating and using threshold according to noise variance);



    